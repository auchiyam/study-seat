{"version":3,"sources":["view/login.js","controller/login.js","view/tablerow.js","view/main.js","controller/main.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","pass","handle_submitted","bind","assertThisInitialized","handle_change","event","console","log","authenticate","change_state","setState","defineProperty","target","id","value","react_default","a","createElement","class","onSubmit","type","placeholder","onChange","Component","TableRows","height","mounted","draw_tables","tab","i","tables","length","color","square","style","width","marginLeft","marginRight","marginTop","marginBottom","background-color","push","divElement","clientHeight","_this2","index","t","ref","MainPage","display_status","update_status","rows","tablerow","setTimeout","App","displayed","login","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9da7ae6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { authenticate } from '../controller/login.js';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { user: '', pass: '' }\r\n\r\n        this.handle_submitted = this.handle_submitted.bind(this);\r\n        this.handle_change = this.handle_change.bind(this);\r\n    }\r\n\r\n    handle_submitted(event) {\r\n        var user = this.state['user'];\r\n        var pass = this.state['pass'];\r\n        var auth = authenticate(user, pass);\r\n\r\n        if (auth) {\r\n            this.props.change_state(1);\r\n        }\r\n    }\r\n\r\n    handle_change(event) {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"d-flex h-100 justify-content-center align-items-center flex-column\">\r\n                <h1 class=\"display-4\">StudySeat</h1>\r\n                <form onSubmit={ this.handle_submitted }>\r\n                    <div class=\"form-group\">\r\n                        <input type=\"email\" class=\"form-control\" id=\"user\" placeholder=\"Username\" onChange = { this.handle_change }/>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\"Password\" onChange = { this.handle_change } />\r\n                    </div>\r\n\r\n                    <div class=\"form-group d-flex justify-content-center\">\r\n                        <button type=\"submit\" id=\"login\" class=\"btn btn-primary\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Login;","export function authenticate(user, pass) {\r\n    console.log(user);\r\n    console.log(pass);\r\n    return true;\r\n}","import React, { Component } from 'react';\r\n\r\nclass TableRows extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            height: 0,\r\n            mounted: false\r\n        };\r\n\r\n        this.draw_tables = this.draw_tables.bind(this);\r\n    }\r\n\r\n    draw_tables(height) {\r\n        var tab = [];\r\n        for (var i = 0; i < this.props.tables.length; i++) {\r\n            var color = '';\r\n            switch (this.props.tables[i]) {\r\n                //available\r\n                case(0):\r\n                    color = '#bbbbbb';\r\n                    break;\r\n                //unavailable\r\n                case(1):\r\n                    color = '#ff2445';\r\n                    break;\r\n                //reserved\r\n                case(2):\r\n                    color = '#8f26ff';\r\n                    break;\r\n                //semi-taken\r\n                case(3):\r\n                    color = '#ffb129';\r\n                    break;\r\n                default:\r\n                    color = '#000000';\r\n                    break;\r\n            }\r\n            var square = (\r\n                <div style={ { width:height, height:height, marginLeft:'20px', marginRight:'20px', marginTop:'20px', marginBottom:'20px', 'background-color':color } }></div>\r\n            );\r\n\r\n            tab.push(square);\r\n        }\r\n\r\n        return tab;\r\n    }\r\n\r\n    //Change height to this div's height to base the squares on\r\n    componentDidMount() {\r\n        var height = this.divElement.clientHeight\r\n        this.setState({\r\n            height: height,\r\n            mounted: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //alternate background color\r\n        var color = 0\r\n        if (this.props.index % 2 === 0) {\r\n            color = '#444444'\r\n        }\r\n        else {\r\n            color = '#ffffff'\r\n        }\r\n\r\n        //start drawing the table once the div is mounted so that squares are drawn with proper size\r\n        var height = this.state['height'] - 40;\r\n        var t;\r\n        if (this.state['mounted']) {\r\n            var t = this.draw_tables(height);\r\n        }\r\n\r\n        return (\r\n            <div class=\"d-flex h-25 justify-content-center align-item-center\" ref={ (divElement)=> this.divElement = divElement } style={ { 'background-color': color } } >\r\n                {t}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableRows;","import React, { Component } from 'react';\r\nimport { fetch_status } from '../controller/main.js';\r\nimport TableRows from './tablerow.js';\r\n\r\nclass MainPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //status for every table\r\n        this.state = {\r\n            tables: []\r\n        }\r\n\r\n        this.display_status = this.display_status.bind(this);\r\n        this.update_status = this.update_status.bind(this);\r\n    }\r\n\r\n    //Display the status of tables \r\n    display_status(tables) {\r\n        var rows = [];\r\n        for (var i = 0; i < tables.length; i++) {\r\n            //let TableRows draw each row\r\n            rows.push(<TableRows tables={ tables[i] } index={ i } />);\r\n        }\r\n        return rows\r\n    }\r\n\r\n    //Updates the status of each seat\r\n    update_status() {\r\n        fetch_status(this);\r\n    }\r\n\r\n    render() {\r\n        //updates every second\r\n        setTimeout(this.update_status, (1000));\r\n\r\n        var rows = this.display_status(this.state['tables']);\r\n\r\n        return (\r\n            <div class=\"d-flex h-100\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;","import DBHandler from './db_handler.js';\r\n\r\nexport function fetch_status(status) {\r\n    status.setState({\r\n        tables: [\r\n            [1, 2, 3],\r\n            [0, 0, 1, 2],\r\n            [1, 0, 3, 2]\r\n        ]\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport Login from './view/login.js';\r\nimport MainPage from './view/main.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { displayed: 1 };\r\n\r\n    this.change_state = this.change_state.bind(this);\r\n  }\r\n\r\n  //changes which page should be loaded.  See render for more info\r\n  change_state(value) {\r\n    this.setState({\r\n      displayed: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //state 0 indicates that the web app should display log in page\r\n    if (this.state['displayed'] === 0) {\r\n      return (\r\n        <div class=\"container-fluid h-100\">\r\n          <Login change_state = { this.change_state } />\r\n        </div>\r\n      );\r\n    }\r\n    //state 1 indicates that the web app should display main page\r\n    if (this.state['displayed'] === 1) {\r\n      return (\r\n        <div class=\"container-fluid h-100\">\r\n          <MainPage change_state = { this.change_state } />\r\n        </div>\r\n      );\r\n    }\r\n    //the state changed into something unknown\r\n    else {\r\n      return (\r\n        <div class=\"container-fluid d-flex h-100 justify-content-center align-items-center flex-column\">\r\n          <h1>Oops, this state has not been implemented yet!</h1>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}